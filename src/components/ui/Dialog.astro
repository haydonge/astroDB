---
import Button from "./Button.astro";
import Checkbox from "./Checkbox.astro";
import TextArea from "./TextArea.astro";
import TextInput from "./TextInput.astro";
---

<dialog
  class="bg-theme-base text-theme-text shadow-black/60 shadow-xl rounded-md w-full max-w-sm backdrop:bg-black/60"
>
  <div class="p-4 sm:p-8 grid gap-6">
    <form class="grid gap-4" id="add-form">
      <h2 class="text-xl text-theme-accent font-bold leading-tight">
        增加订单
      </h2>
      <TextInput name="Link Title" inputId={Math.random()} />
      <TextArea name="Link Description" id={Math.random()} />
      <TextInput
        name="Link URL"
        inputId={Math.random()}
        title="Must start with https://"
        pattern="https?://.*"
      />
      <Checkbox checked={false} inputId={Math.random()} name="isRead" />
      <div class="flex gap-4 flex-wrap">
        <Button intent="primary" id="close-dialog" type="button">Close</Button>
        <Button intent="accent" type="submit">Add Link</Button>
      </div>
    </form>
  </div>
</dialog>

<script>
  // 获取表单元素和按钮元素
  const addForm = document.querySelector("#add-form") as HTMLFormElement;
  const openDialogBtn = document.getElementById("open-dialog" ) as HTMLButtonElement;
  const closeDialogBtn = document.getElementById("close-dialog") as HTMLButtonElement;
  const dialog = document.querySelector("dialog") as HTMLDialogElement;

  // 点击打开对话框按钮时显示对话框
  openDialogBtn.addEventListener("click", () => dialog.showModal());
// 点击关闭对话框按钮时关闭对话框
  closeDialogBtn.addEventListener("click", () => dialog.close());
// 点击对话框外部时关闭对话框
  dialog.addEventListener("click", (e) => {
    if (e.target === e.currentTarget) {
      dialog.close();
    }
  });

  // form inputs 
  //sanitize-html 是一个 JavaScript 模块，用于在用户提供的 HTML 中移除或转义潜在的不安全内容，
  //以防止跨站脚本攻击（XSS）和其他安全漏洞。它的主要功能是对 HTML 进行清理和过滤，确保其中的内容
  //符合安全标准。
  import sanitizeHtml from "sanitize-html";
  // 提交表单时的事件监听器
  addForm.addEventListener("submit", async (e) => {
    e.preventDefault();
    try {
      // 获取表单数据
      const formData = new FormData(addForm);
      const title = sanitizeHtml(formData.get("link-title") as string);
      const description = sanitizeHtml(formData.get("link-description") as string );
      const url = sanitizeHtml(formData.get("link-url") as string);
      const isRead = formData?.get("isRead") === "on" ? true : false ?? false;
      
      // 检查表单数据类型并发送请求
      if (
        typeof title === "string" &&
        typeof description === "string" &&
        typeof url === "string"
      ) {
        const req = await fetch("/api/addLink.json", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            title,
            description,
            url,
            isRead,
          }),
        });
       // 处理请求的响应
        const { success, data, message } = await req.json();
       // 如果请求成功，则重置表单并关闭对话框，刷新页面
        if (success) {
          addForm.reset();
          dialog.close();
          location.reload();
        } else {
          throw new Error(message);
        }
      }
    } catch (e) {       // 捕获异常并弹出警告
      if (e instanceof Error) {
        alert(e.message);
      }
      console.error(e);
    }
  });
</script>
