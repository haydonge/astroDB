---
import StockCard from "../components/ui/StockCard.astro";
import BaseLayout from "../layouts/BaseLayout.astro";
import StockTable from "../components/ui/stockTable.astro";
import { Stockonhand } from "astro:db";
import { db } from "astro:db";
import Button from "@/components/ui/Button.astro";
type Stockt = {
  id: number;
  partnumber: string;
  description: string;
  qty: number;
  url: string;
  safeqty: number;
};

interface Props {
  stock: Stockt | null;
}

const { stock } = Astro.props as Props;


// 从数据库获取默认数据
const defaultStocks = await db.select().from(Stockonhand);

// 从 props 中获取 stocks 数据，如果没有传入，则使用默认数据
// const { stocks: externalStocks } = Astro.props;

const filteredStocks =  defaultStocks;
// console.log(Stocks);
---

<BaseLayout>
  <!-- <div class="flex justify-center items-end gap-48">
    <form class="flex items-end gap-4 " id="search-form2">
    </form>
  </div>
  <br> -->
  <main class="flex flex-col items-center space-y-4">
    <!-- <h3 class="text-xl text-theme-accent font-bold leading-tight">
      搜索库存
    </h3> -->
    <form class="form flex items-center justify-center space-x-9" id="form1">
        <label for="search">Search DataBase </label>
       <input 
        type="text"
        required
        min="2"
        max="24"
        name="search"
        id="search"
        placeholder="Enter a search term…"
        class=" border border-white" /> 
        <Button intent="accent" type="submit">Search</Button>
    </form>

    <p id="searchReadout"> </p>
  </main>
  
  <section aria-label="Search Results">
    <ul id="searchResults"></ul>
  <div id="stockTableContainer">
  <StockTable stocks={filteredStocks}/>
</div>
</section>
  <!-- <divclass="grid gap-6 grid-cols-[repeat(auto-fit,_minmax(280px,_1fr))] items-start"  >
    {filteredStocks.map((item:any) => <StockCard stock={item} />)}
  </div> -->

  
<script>
  //selector
  const search = document.querySelector("#search");
  const searchsubmit =document.querySelector("#form1") as HTMLFormElement;
  const searchResults =document.querySelector("#searchResults");

  // const SPINNER = `<svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" fill="#d70f0f" viewBox="0 0 256 256" id="spinner"><path d="M236,128a108,108,0,0,1-216,0c0-42.52,24.73-81.34,63-98.9A12,12,0,1,1,93,50.91C63.24,64.57,44,94.83,44,128a84,84,0,0,0,168,0c0-33.17-19.24-63.43-49-77.09A12,12,0,1,1,173,29.1C211.27,46.66,236,85.48,236,128Z"></path><style>
	// 			#spinner {
	// 				animation: spin 1s linear infinite;
	// 			}
	// 			@keyframes spin {
	// 				100% {
	// 					transform: rotate(360deg);
	// 				}
	// 			}
	// 			</style></svg>`;

  type Stockt = {
  id: number;
  partnumber: string;
  description: string;
  qty: number;
  url: string;
  safeqty: number;
};

  let SEARCH_DATA = [];

  import sanitizeHtml from "sanitize-html";
  import DOMPurify from "dompurify";
  

    function    updateDocumentTitle(search) {
      document.title = search
      ?`Search Result for "${search}"`:"Searchthe database";
    }
     
    // function generateSearchList(results){
    //   return results.map((r) => {
    //     const {id, partnumber ,description,qty,url, safeqty} =r.item;
    //     return `
    //     <tr {id} class="border-t">
    //     <th class="py-2">{.partnumber}</th>
    //     <th class="py-2">{.description}</th>
    //     <th class="py-2">{.qty}</th>
    //     <th class="py-2">{.safeqty}</th>
    //     <th class="py-2">
    //       <a href={url} class="text-blue-500 hover:underline mr-4">
    //         Open Link
    //       </a> 
    //       </th>
    //       <th>
    //       <button
    //         class="text-red-500 hover:text-red-700"
    //         open-dialog
    //         data-id={id}
    //         aria-label={`Update Link: ${r.partnumber}`}
    //       >
          
    //         <Icon name="check" size={24} /> 
          
    //       </button>

    //       <button
    //         class="text-red-500 hover:text-red-700"
    //         data-delete
    //         data-id={stock.id}
    //         aria-label={`Delete Link: ${r.partnumber}`}
    //       >
    //         <Icon name="trash" size={24} />
    //       </button>
    //     </th>
    //   </tr>
    //    `
    //   }
    // )
    // }


     function updateSearchPageURL(search) {
				const url = new URL(window.location.href);
				url.searchParams.set("q", search);
				window.history.replaceState(null, "", url);
       }



    async function fetchSearchResults(search_word:string) {
				if (search_word.length === 0) return;
				 // searchResult.innerHTML =SPINNER;
					try {
						const res =  await fetch(`/api/searchdata.json`,{
              method: "SEARCH",
              headers: {"Content-Type": "application/json",   },
              body: JSON.stringify(search_word )
              });
            const { success, data, message } = await res.json();
						SEARCH_DATA = data;
            // updateStockTable(SEARCH_DATA);
            console.log(SEARCH_DATA);
            // searchResult?.innerHTML=  SEARCH_DATA.length >0 ? generateSearchList(data):"No Result Found";
						console.error(e);
					}		
			}



     window.addEventListener("DOMContentLoaded", () => {
       const urlParams = 
         new URLSearchParams(window.location.search).get("q") as string ;
        fetchSearchResults(urlParams);
        updateDocumentTitle(urlParams);
        search.value =urlParams;
        search.focus();
       });
     

      searchsubmit.addEventListener("submit", async (e) => {
        e.preventDefault();
       try {
        const searchValue = DOMPurify.sanitize(search.value);
        updateDocumentTitle(searchValue);
        const urlParams = new URLSearchParams(window.location.search).get("q") ;
				fetchSearchResults(searchValue);
        // search.value = searchValue;
				updateSearchPageURL(searchValue);

        } catch (e) {       // 捕获异常并弹出警告
      if (e instanceof Error) {
        alert(e.message);
      }
      console.error(e);
    }
			});


</script>
</BaseLayout>
